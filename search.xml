<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言学习整理01</title>
    <url>/2021/06/29/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%8601/</url>
    <content><![CDATA[<h1 id="c语言学习整理01"><a class="markdownIt-Anchor" href="#c语言学习整理01"></a> C语言学习整理01</h1>
<ol>
<li><strong>Linux进程地址空间图</strong></li>
</ol>
<img src="/images/进程地址空间.png" alt="img 进程地址空间" style="zoom: 80%;">
<span id="more"></span>
<ol start="2">
<li><strong>编译过程</strong></li>
</ol>
<img src="/images/编译过程.png" alt="img 进程地址空间" style="zoom: 80%;">
<ol start="3">
<li>
<p>变量是有名字的内存空间，其内存空间由数据类型决定大小和解释方式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1B = 8bit</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">int</span>) = <span class="number">4B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">char</span>) = <span class="number">1B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">long</span>) = <span class="number">4B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">short</span>) = <span class="number">2B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">float</span>) = <span class="number">4B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">double</span>) = <span class="number">8B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">void</span> *) = <span class="number">8B</span></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) = <span class="number">8B</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>不同进制数的输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//十进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;123 = %d\n&quot;</span>, <span class="number">123</span>);	</span><br><span class="line">    <span class="comment">//八进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0123 = %d\n&quot;</span>, <span class="number">0123</span>);	</span><br><span class="line">    <span class="comment">//十六进制输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x123 = %d\n&quot;</span>, <span class="number">0x123</span>);	</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">123 = 123</span></span><br><span class="line"><span class="comment">0123 = 83</span></span><br><span class="line"><span class="comment">0x123 = 291</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>x进制 -&gt; 10进制：<br>
<img src="/images/x进制转10进制.png" alt="img x进制转10进制"><br>
2进制 -&gt; 8进制：每三位为一组</p>
<p>2进制 -&gt; 16进制：每四位为一组</p>
<p><strong>10进制 -&gt; 2进制</strong>：<a href="https://baike.baidu.com/item/%E9%99%A4k%E5%8F%96%E4%BD%99%E6%B3%95/19385576?fr=aladdin">除2取余法</a></p>
</li>
<li>
<p>内存中一般用<strong>小端存储</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>法存储数据，int占据4个字节，a的地址是addr_a，b的地址是addr_b，根据以下代码说明变量a和b的真值、机器数和内存布局（每个字节的内容）分别如何？还有一种<strong>大端存储</strong><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... //</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">-1234</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2345</span>;</span><br><span class="line"><span class="comment">// ... //</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th></th>
<th>变量a</th>
<th>变量b</th>
</tr>
</thead>
<tbody>
<tr>
<td>真值</td>
<td>-1234</td>
<td>2345</td>
</tr>
<tr>
<td>机器数</td>
<td>FF FF FB 2E</td>
<td>00 00 09 29</td>
</tr>
<tr>
<td>内存布局</td>
<td>2E FB FF FF</td>
<td>29 09 00 00</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin">补码</a>：有符号整型在计算机中采取补码的编码方式，通过给一个数补上一个周期，把减法变成加法。</p>
<ul>
<li>
<p>正整数：正整数的补码与原码相同。</p>
</li>
<li>
<p>负整数：负整数的补码是将其除<strong>符号位</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>以外，其余所有位取反后加1。</p>
</li>
<li>
<p>0：0的补码是唯一表示的。</p>
</li>
</ul>
</li>
<li>
<p>根据机器数的大小比较真值的大小</p>
<ol>
<li>符号不同，正数 &gt; 负数</li>
<li>符号相同，机器数越大，真值越大</li>
<li>
<ul>
<li>最大负整数：1,111 1111 … = -1</li>
<li>最小负整数：1,000 0000 … = -2^(n-1)</li>
<li>最大正整数：0,111 1111 … = 2^(n-1) - 1</li>
<li>可表示的范围：-2^(n-1) ~ 2^(n-1) - 1</li>
</ul>
</li>
</ol>
</li>
<li>
<p>机器数相同，真值不一定相同，真值由解释方式决定。</p>
</li>
<li>
<p>两个有符号数的加法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">机器数1 + 机器数2 = 机器数3 -&gt; (用补码方式解释) 真值(可能会溢出)</span><br><span class="line"></span><br><span class="line">例题：给出两个数据-123和12，如果采用原码方式，如何执行加法运算；如果是补码方式，如何执行加法运算？说明在原码加法和补码加法中，分别在哪些步骤中使用了加法器、减法器和大小比较器。</span><br><span class="line"></span><br><span class="line">解：-123和12</span><br><span class="line">原码加法:</span><br><span class="line">	-123 -&gt; 1,111 1011</span><br><span class="line">	12   -&gt; 0,000 1100</span><br><span class="line">	不带符号位参与运算，判断两数绝对值，用绝对值大的减去绝对值小的，符号位与绝对值大的相同。(大小比较器)</span><br><span class="line">	111 1011 - 000 1100 = 110 0111 -&gt; 1,110 1111(减法器)</span><br><span class="line">补码加法:</span><br><span class="line">	-123 -&gt; 1,000 0101</span><br><span class="line">	12   -&gt; 0,000 1100</span><br><span class="line">	负数的补码为符号位不变，原码取反+1，带符号位参与加法运算。负数结果数值位取反+1。</span><br><span class="line">	1,000 0101 + 0,000 1100 = 1,001 0001 -&gt; 1,110 1111(加法器)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="作业"><a class="markdownIt-Anchor" href="#作业"></a> 作业</h1>
<ol>
<li>
<p>打印九九乘法表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1 = 1</span><br><span class="line">1*2 = 2 2*2 = 4</span><br><span class="line">1*3 = 3 2*3 = 6 3*3 = 9</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;func.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)&#123;</span><br><span class="line">        <span class="comment">//j &lt;= i</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-2d * %-2d = %-2d &quot;</span>, j, i, j * i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打印图案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  * * *</span><br><span class="line"> * * * *</span><br><span class="line">* * * * *</span><br><span class="line"> * * * *</span><br><span class="line">  * * *</span><br><span class="line">   * *</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5 <span class="comment">//上三角形边长</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印正三角</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="comment">//打印N - 1 - i个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印i + 1个*，每个*中间有一个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印倒三角</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//打印N - 1 - i个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印i + 1个*，每个*中间有一个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打印图案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    *</span><br><span class="line">   * *</span><br><span class="line">  *   *</span><br><span class="line"> *     *</span><br><span class="line">*       *</span><br><span class="line"> *     *</span><br><span class="line">  *   *</span><br><span class="line">   * *</span><br><span class="line">    *</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5 <span class="comment">//上三角形边长</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="comment">//打印N - 1 - i个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//边界打印*，其余打印空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span> || k == <span class="number">2</span> * i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span> || k == <span class="number">2</span> * i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打印图案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   * *       * *</span><br><span class="line">  * * *     * * *</span><br><span class="line"> * * * *   * * * *</span><br><span class="line">* * * * * * * * * *</span><br><span class="line"> * * * * * * * * *</span><br><span class="line">  * * * * * * * *</span><br><span class="line">   * * * * * * *</span><br><span class="line">    * * * * * * </span><br><span class="line">     * * * * *</span><br><span class="line">      * * * *</span><br><span class="line">       * * *</span><br><span class="line">        * *</span><br><span class="line">         *</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*利用第二题思想将图形分为</span></span><br><span class="line"><span class="comment">   * *       * *</span></span><br><span class="line"><span class="comment">  * * *     * * *</span></span><br><span class="line"><span class="comment"> * * * *   * * * *</span></span><br><span class="line"><span class="comment">* * * * * * * * * *</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * * * * * * * * *</span></span><br><span class="line"><span class="comment">  * * * * * * * *</span></span><br><span class="line"><span class="comment">   * * * * * * *</span></span><br><span class="line"><span class="comment">    * * * * * * </span></span><br><span class="line"><span class="comment">     * * * * *</span></span><br><span class="line"><span class="comment">      * * * *</span></span><br><span class="line"><span class="comment">       * * *</span></span><br><span class="line"><span class="comment">        * *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打印驼峰</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N / <span class="number">2</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span> + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印下三角</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - <span class="number">2</span> - i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>数据的高字节存储在高地址中，数据的低字节存储在低地址中 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>数据的高字节存储在低地址中，数据的低字节存储在高地址中 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>取最高位为符号位 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile学习</title>
    <url>/2021/07/10/Makefile%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> Makefile</h1>
<h4 id="功能通过makefile文件来描述源程序之间的相互关系并自动维护编译工作"><a class="markdownIt-Anchor" href="#功能通过makefile文件来描述源程序之间的相互关系并自动维护编译工作"></a> 功能：通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。</h4>
<span id="more"></span>
<ol>
<li>
<p>Makefile的变量：</p>
<ol>
<li>
<p>自定义变量：<strong>字符串(变量名):=字符串(变量值)</strong>，可通过$(变量名)替代所有的变量值。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#未使用自定义变量</span></span><br><span class="line"><span class="section">main:main.c</span></span><br><span class="line">	gcc main.c -o main</span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">#使用自定义变量</span></span><br><span class="line">target:=main</span><br><span class="line">src:=main.c</span><br><span class="line"><span class="variable">$(target)</span>:<span class="variable">$(src)</span></span><br><span class="line">	gcc <span class="variable">$(src)</span> -o <span class="variable">$(target)</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>自动变量：随规则的变化，同一个变量名对应不同的变量值</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$@</td>
<td>目标文件</td>
</tr>
<tr>
<td>$&lt;</td>
<td>第一个依赖文件</td>
</tr>
<tr>
<td>$^</td>
<td>所有的依赖文件，以空格分隔</td>
</tr>
<tr>
<td>$?</td>
<td>日期新于目标文件的所有相关文件列表，逗号分隔</td>
</tr>
<tr>
<td>$(@D)</td>
<td>目标文件的目录名部分</td>
</tr>
<tr>
<td>$(@F)</td>
<td>目标文件的文件名部分</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>预定义的变量：有预定义的变量，可以手动其修改含义</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>含义</th>
<th>变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td>AR</td>
<td>打包库文件</td>
<td>ar</td>
</tr>
<tr>
<td>AS</td>
<td>汇编程序</td>
<td>as</td>
</tr>
<tr>
<td>CC</td>
<td>C编译器</td>
<td>cc</td>
</tr>
<tr>
<td>CPP</td>
<td>CPP编译器</td>
<td>$(CC) -E</td>
</tr>
<tr>
<td>CXX</td>
<td>C++编译器</td>
<td>g++</td>
</tr>
<tr>
<td>RM</td>
<td>删除</td>
<td>rm -f</td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
<li>
<p>wildcard：从文件系统中提取文件名(按照通配符规则)</p>
<p>subst/patsubst：文本替换/按格式文本替换</p>
   <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">srcs:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="comment">#srcs为目录下所有.c文件</span></span><br><span class="line">-----------------------------------------</span><br><span class="line">var:=<span class="string">&quot;How are you&quot;</span></span><br><span class="line">newvar:=<span class="variable">$(<span class="built_in">patsubst</span> you,me,<span class="variable">$(var)</span>)</span> <span class="comment">#将var中所有的you替换成me</span></span><br><span class="line">-----------------------------------------</span><br><span class="line">srcs:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> </span><br><span class="line">objs:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(srcs)</span>)</span> <span class="comment">#将srcs中所有的.c文件替换成.o文件</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>%<strong>匹配字符：从上一个规则的</strong>依赖条件</strong>中按照匹配格式匹配内容，每次匹配成功就生成一个规则，<strong>%<strong>表示匹配得到的内容。(在变量引用时使用</strong>%</strong>)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">srcs:$(wildcard *.c) </span></span><br><span class="line"><span class="section">objs:$(patsubst %.c,%,<span class="variable">$(srcs)</span>) #匹配srcs中所有的.c文件替换成.o文件</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>for循环：</p>
   <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">srcs:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">exes:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%,<span class="variable">$(srcs)</span>)</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">    for i in <span class="variable">$(exes)</span>; do <span class="variable">$(CC)</span> $$i.c -o $$i; done <span class="comment">#$$i代表$(exes)中的内容</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>伪目标：以不存在的文件作为命令的目标(每次make都会执行)，常用<code>.PHONY</code>来区分伪目标方便阅读。</p>
</li>
<li>
<p>增量编译：</p>
   <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC:=gcc                                                                        </span><br><span class="line">srcs:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">objs:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(srcs)</span>)</span></span><br><span class="line">final:=main</span><br><span class="line"><span class="section">all:<span class="variable">$(final)</span></span></span><br><span class="line"><span class="variable">$(final)</span>:<span class="variable">$(objs)</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> -c <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:rebuild clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    <span class="variable">$(RM)</span> <span class="variable">$(objs)</span> <span class="variable">$(final)</span></span><br><span class="line"><span class="section">rebuild:clean all </span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编译所有.c文件得到可执行文件</p>
   <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC:=gcc                                                                        </span><br><span class="line">srcs:=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">exes:=<span class="variable">$(<span class="built_in">patsubst</span> %.c,%,<span class="variable">$(srcs)</span>)</span></span><br><span class="line"><span class="section">all:<span class="variable">$(exes)</span></span></span><br><span class="line"><span class="section">%:%.c</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:rebuild clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    <span class="variable">$(RM)</span> <span class="variable">$(exes)</span></span><br><span class="line"><span class="section">rebuild:clean all</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown学习</title>
    <url>/2021/06/28/Markdown%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="markdown语法学习"><a class="markdownIt-Anchor" href="#markdown语法学习"></a> Markdown语法学习</h1>
<span id="more"></span>
<p><a href="https://www.runoob.com/markdown/md-link.html">学自菜鸟</a></p>
<ol>
<li>用=和-标记一二级标题</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">我是一级标题</span></span><br><span class="line"><span class="section">=================</span></span><br><span class="line"></span><br><span class="line"><span class="section">我是二级标题</span></span><br><span class="line"><span class="section">-----------------</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>用#标记标题(共6级)</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>换行：<strong>两个空格 + 回车</strong></p>
</li>
<li>
<p>字体加粗or斜体</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">_斜体_</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="strong">__粗体__</span></span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="strong">__<span class="emphasis">_粗斜体<span class="strong">__<span class="emphasis">_</span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>分割线：可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> <span class="emphasis">* *</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> - -</span><br><span class="line"></span><br><span class="line"><span class="emphasis">_ _</span> <span class="emphasis">_</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li><s>删除线</s>：文字两端加~~</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><u>下划线</u>：使用HTML中的<code>&lt;u&gt;</code>标签实现</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[^脚注]</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>
<p>无序列表：用(*)(+)(-)后加一个空格表示</p>
</li>
<li>
<p>有序列表：用数字加上.再加一个空格表示</p>
</li>
<li>
<p>Markdown区块：段落开头使用<code>&gt;</code>符号，后面跟一个空格(可以嵌套)</p>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块</span></span><br><span class="line"><span class="quote">&gt; &gt; 嵌套</span></span><br></pre></td></tr></table></figure>
<ol start="12">
<li>Markdown链接：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名</span>](<span class="link">链接地址</span>)</span><br><span class="line">或者</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>
<ol start="13">
<li>Markdown图片：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">name 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br><span class="line"></span><br><span class="line">可以用<span class="xml"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span>标签指定高度和宽度：<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">width</span> = <span class="string">&quot;xx%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol start="14">
<li>转义：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用\能够正常显示特殊字符，如：</span><br><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*</span>   星号</span><br><span class="line"><span class="emphasis">_   下划线</span></span><br><span class="line"><span class="emphasis">&#123;&#125;  花括号</span></span><br><span class="line"><span class="emphasis">[]  方括号</span></span><br><span class="line"><span class="emphasis">()  小括号</span></span><br><span class="line"><span class="emphasis">#   井字号</span></span><br><span class="line"><span class="emphasis">+   加号</span></span><br><span class="line"><span class="emphasis">-   减号</span></span><br><span class="line"><span class="emphasis">.   英文句点</span></span><br><span class="line"><span class="emphasis">!   感叹号</span></span><br></pre></td></tr></table></figure>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>要脚注的文字 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
